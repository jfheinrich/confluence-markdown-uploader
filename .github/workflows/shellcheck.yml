name: Shell Script Validation

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

# Restrict permissions of GITHUB_TOKEN for security
permissions:
  contents: read

jobs:
  shellcheck:
    name: ShellCheck Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for relevant file changes
        id: filter
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, check if any .sh files or the workflow file changed
            if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(sh)$|\.github/workflows/shellcheck\.yml$' || true; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Relevant files changed, will run checks"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "No relevant files changed, skipping checks"
            fi
          else
            # For push events and workflow_dispatch, always run
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Running checks for push/manual trigger"
          fi
      
      - name: Run ShellCheck
        if: steps.filter.outputs.changed == 'true'
        uses: ludeeus/action-shellcheck@00cae500b08a931fb5698e11e79bfbd38e612a38 # v2.0.0
        with:
          severity: warning
          # Additional shellcheck options
          additional_files: '*.sh'
        env:
          SHELLCHECK_OPTS: -x -s sh
      
      - name: Verify POSIX compatibility
        if: steps.filter.outputs.changed == 'true'
        run: |
          echo "Checking POSIX compatibility of shell scripts..."
          
          # Find all shell scripts
          # Use find -print0 and while read -d '' to safely handle file paths with spaces
          find . -type f -name "*.sh" -not -path "./.git/*" -print0 | while IFS= read -r -d '' script; do
            echo "Checking $script..."
            
            # Check for bash-specific features that violate POSIX
            if grep -n '\[\[' "$script"; then
              echo "ERROR: Found [[ ]] in $script (use [ ] for POSIX compatibility)"
              exit 1
            fi
            
            if grep -n 'function ' "$script" | grep -v '#.*function '; then
              echo "ERROR: Found 'function' keyword in $script (use name() for POSIX compatibility)"
              exit 1
            fi
            
            # Check shebang
            if head -n 1 "$script" | grep -q '#!/bin/sh' || head -n 1 "$script" | grep -q '#!/usr/bin/env sh'; then
              echo "âœ“ $script has correct POSIX shebang"
            elif head -n 1 "$script" | grep -q '#!/bin/bash'; then
              echo "WARNING: $script uses bash shebang (consider #!/bin/sh for POSIX)"
            fi
          done
          
          echo "POSIX compatibility check completed successfully"
      
      - name: Report success when no relevant changes
        if: steps.filter.outputs.changed == 'false'
        run: |
          echo "No shell script changes detected - skipping ShellCheck analysis"
          echo "Workflow completes successfully"
